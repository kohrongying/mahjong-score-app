{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../../src/App.svelte"
  ],
  "sourcesContent": [
    "<script>\n  import {writable} from 'svelte/store'\n\n  let gameStatus = 'WELCOME';\n  let players = [\n    {\n      name: 'PLAYER1',\n      score: 0,\n    },\n    {\n      name: 'PLAYER2',\n      score: 0,\n    },\n    {\n      name: 'PLAYER3',\n      score: 0,\n    },\n    {\n      name: 'PLAYER4',\n      score: 0,\n    },\n  ];\n\n  let events = writable([]);\n  events.subscribe(events =>\n      events.map((event) => event.deltas)\n          .reduce(([a, b, c, d], [dA, dB, dC, dD]) => [a + dA, b + dB, c + dC, d + dD], [0, 0, 0, 0])\n          .forEach((score, index) => {\n            players[index].score = score\n          }));\n\n  const changeStatus = (statusChange) => () => {\n    gameStatus = statusChange\n  };\n\n  let winnerIndex = null;\n  let points = 0;\n  let loserIndex = null;\n\n  const setWinner = (index) => () => {\n    winnerIndex = index\n  };\n\n  const setPoints = (pts) => () => {\n    points = pts\n  };\n\n  const setLoser = (index) => () => {\n    if (loserIndex === index) {\n      loserIndex = null\n    } else {\n      loserIndex = index\n    }\n  };\n\n  const computeResult = () => {\n    let score = 100 * Math.pow(2, points - 1);\n    let deltas = [0, 0, 0, 0];\n\n\n    for (let i = 0; i < 4; i++) {\n      if (i === winnerIndex) {\n        deltas[i] += 3 * score\n      } else {\n        deltas[i] -= score\n      }\n    }\n\n    if (loserIndex === null) {\n      for (let i = 0; i < 4; i++) {\n        if (i === winnerIndex) {\n          deltas[i] += 3 * score\n        } else {\n          deltas[i] -= score\n        }\n\n      }\n    } else {\n      deltas[winnerIndex] += score;\n      deltas[loserIndex] -= score\n    }\n\n    let description = `${players[winnerIndex].name} wins ${points} ${points === 1 ? 'point' : 'points'}`;\n    if (loserIndex === null) {\n      description += ' by own draw'\n    } else {\n      description += ` from ${players[loserIndex].name}`\n    }\n    events.update(events => {\n      events.push({description, deltas});\n      return events\n    });\n    winnerIndex = null;\n    points = 0;\n    loserIndex = null;\n    gameStatus = \"GAME_START\"\n  };\n\n  const computeInstantPayment = () => {\n    let score = 100 * Math.pow(2, points - 1);\n    let deltas = [0, 0, 0, 0];\n\n    deltas[winnerIndex] += 4 * score;\n    deltas = deltas.map(delta => delta - score);\n\n    let description = `${players[winnerIndex].name} gets an instant payment worth ${points} ${points === 1 ? 'point' : 'points'}`;\n    events.update(events => {\n      events.push({description, deltas});\n      return events\n    });\n    winnerIndex = null;\n    points = 0;\n    loserIndex = null;\n    gameStatus = \"GAME_START\"\n  }\n</script>\n\n<main>\n    {#if gameStatus === 'WELCOME'}\n      <h1>Mahjong Scores</h1>\n      <button on:click={changeStatus('GAME_INTIALISED')}>\n        New Game\n      </button>\n    {/if}\n    {#if gameStatus === 'GAME_INTIALISED'}\n      <h1>NEW GAME</h1>\n        {#each players as player}\n          <div>\n            <input class=\"player-name\" bind:value={player.name}>\n          </div>\n        {/each}\n      <button on:click={changeStatus('GAME_START')}>GO</button>\n    {/if}\n    {#if gameStatus === 'GAME_START'}\n        {#each players as player}\n          <div class=\"player-score\">\n            <div>{player.name}</div>\n            <div style=\"font-size: 40px;\">{player.score}</div>\n          </div>\n        {/each}\n      <button on:click={changeStatus('GAME_ADD_RESULT')}>ADD RESULT</button>\n      <button on:click={changeStatus('GAME_INSTANT_PAYMENT')}>INSTANT PAYMENT</button>\n        {#each $events as event}\n          <div>{event.description}</div>\n        {/each}\n    {/if}\n    {#if gameStatus === 'GAME_ADD_RESULT'}\n      <h3>Winner</h3>\n      <div class=\"button-group winner\">\n          {#each players as player, i}\n            <button on:click={setWinner(i)}\n                    style=\"background-color: {winnerIndex === i ? 'gold' : '#f4f4f4'}\">{player.name}</button>\n          {/each}\n      </div>\n      <h3>Points</h3>\n      <div class=\"button-group points\">\n        <button on:click={setPoints(1)} style=\"background-color: {points === 1 ? 'gold' : '#f4f4f4'}\">1</button>\n        <button on:click={setPoints(2)} style=\"background-color: {points === 2 ? 'gold' : '#f4f4f4'}\">2</button>\n        <button on:click={setPoints(3)} style=\"background-color: {points === 3 ? 'gold' : '#f4f4f4'}\">3</button>\n        <button on:click={setPoints(4)} style=\"background-color: {points === 4 ? 'gold' : '#f4f4f4'}\">4</button>\n        <button on:click={setPoints(5)} style=\"background-color: {points === 5 ? 'gold' : '#f4f4f4'}\">5</button>\n      </div>\n      <h3>Loser</h3>\n      <div class=\"button-group loser\">\n          {#each players as player, i}\n            <button\n                on:click={setLoser(i)}\n                style=\"background-color: {loserIndex === i ? 'gold' : '#f4f4f4'}\"\n                disabled={winnerIndex === i}\n            >\n                {player.name}\n            </button>\n          {/each}\n      </div>\n      <button on:click={computeResult}>NEXT ROUND</button>\n    {/if}\n    {#if gameStatus === 'GAME_INSTANT_PAYMENT'}\n      <h3>Winner</h3>\n      <div class=\"button-group winner\">\n          {#each players as player, i}\n            <button on:click={setWinner(i)}\n                    style=\"background-color: {winnerIndex === i ? 'gold' : '#f4f4f4'}\">{player.name}</button>\n          {/each}\n      </div>\n      <h3>Points</h3>\n      <div class=\"button-group points\">\n        <button on:click={setPoints(1)} style=\"background-color: {points === 1 ? 'gold' : '#f4f4f4'}\">1</button>\n        <button on:click={setPoints(2)} style=\"background-color: {points === 2 ? 'gold' : '#f4f4f4'}\">2</button>\n      </div>\n      <button on:click={computeInstantPayment}>NEXT ROUND</button>\n    {/if}\n</main>\n\n<style>\n  @import url('https://fonts.googleapis.com/css?family=Rubik');\n\n  main {\n    padding: 1em;\n    width: 70%;\n    font-family: 'Rubik';\n  }\n\n  h1 {\n    text-transform: uppercase;\n    font-size: 40px;\n    text-align: left;\n  }\n\n  .player-score {\n    margin-bottom: 15px;\n  }\n\n  button {\n    padding: 10px 20px;\n    border-radius: 10px;\n    background-color: gold;\n    font-size: 20px;\n    text-transform: uppercase;\n    width: 100%;\n    margin: 10px 0;\n    border: none;\n    text-overflow: ellipsis;\n  }\n\n  input.player-name {\n    width: 100%;\n    border-radius: 10px;\n    padding: 10px 15px;\n  }\n\n  .button-group {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n  }\n\n  .button-group.loser {\n    margin-bottom: 20px;\n  }\n\n  .button-group.points {\n    grid-template-columns: 1fr 1fr 1fr 1fr 1fr;\n  }\n\n  .button-group button {\n    margin: 0;\n    height: 100%;\n    border-radius: 0;\n    padding: 10px;\n  }\n\n  h3 {\n    margin-top: 20px;\n    margin-bottom: 10px;\n  }\n</style>"
  ],
  "names": [],
  "mappings": "AAkME,QAAQ,IAAI,+CAA+C,CAAC,CAAC,AAE7D,IAAI,cAAC,CAAC,AACJ,OAAO,CAAE,GAAG,CACZ,KAAK,CAAE,GAAG,CACV,WAAW,CAAE,OAAO,AACtB,CAAC,AAED,EAAE,cAAC,CAAC,AACF,cAAc,CAAE,SAAS,CACzB,SAAS,CAAE,IAAI,CACf,UAAU,CAAE,IAAI,AAClB,CAAC,AAED,aAAa,cAAC,CAAC,AACb,aAAa,CAAE,IAAI,AACrB,CAAC,AAED,MAAM,cAAC,CAAC,AACN,OAAO,CAAE,IAAI,CAAC,IAAI,CAClB,aAAa,CAAE,IAAI,CACnB,gBAAgB,CAAE,IAAI,CACtB,SAAS,CAAE,IAAI,CACf,cAAc,CAAE,SAAS,CACzB,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CAAC,CAAC,CACd,MAAM,CAAE,IAAI,CACZ,aAAa,CAAE,QAAQ,AACzB,CAAC,AAED,KAAK,YAAY,cAAC,CAAC,AACjB,KAAK,CAAE,IAAI,CACX,aAAa,CAAE,IAAI,CACnB,OAAO,CAAE,IAAI,CAAC,IAAI,AACpB,CAAC,AAED,aAAa,cAAC,CAAC,AACb,OAAO,CAAE,IAAI,CACb,qBAAqB,CAAE,GAAG,CAAC,GAAG,AAChC,CAAC,AAED,aAAa,MAAM,cAAC,CAAC,AACnB,aAAa,CAAE,IAAI,AACrB,CAAC,AAED,aAAa,OAAO,cAAC,CAAC,AACpB,qBAAqB,CAAE,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,AAC5C,CAAC,AAED,2BAAa,CAAC,MAAM,cAAC,CAAC,AACpB,MAAM,CAAE,CAAC,CACT,MAAM,CAAE,IAAI,CACZ,aAAa,CAAE,CAAC,CAChB,OAAO,CAAE,IAAI,AACf,CAAC,AAED,EAAE,cAAC,CAAC,AACF,UAAU,CAAE,IAAI,CAChB,aAAa,CAAE,IAAI,AACrB,CAAC"
}